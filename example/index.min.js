(function(dependencies, global) {
    var cache = [];

    function require(path) {
        var module = cache[path],
            callback, exports;

        if (module === undefined) {
            callback = dependencies[path];
            exports = {};

            cache[path] = module = {
                exports: exports,
                require: require
            };

            callback.call(exports, require, exports, module, global);
        }

        return module.exports;
    }

    require.resolve = function(path) {
        return path;
    };

    if (typeof(define) === "function" && define.amd) {
        define([], function() {
            return require(0);
        });
    } else if (typeof(module) !== "undefined" && module.exports) {
        module.exports = require(0);
    } else {
        
            require(0);
        
    }
}([
function(require, exports, module, global) {

global.aabb2 = require(1);


var a = aabb2.create();

console.log(a);


},
function(require, exports, module, global) {

var mathf = require(2),
    vec2 = require(8);


var aabb2 = module.exports;


aabb2.ArrayType = typeof(Float32Array) !== "undefined" ? Float32Array : mathf.ArrayType;


function AABB2(ArrayType) {

    ArrayType = ArrayType !== undefined ? ArrayType : aabb2.ArrayType;

    this.min = vec2.create(Infinity, Infinity, ArrayType);
    this.max = vec2.create(-Infinity, -Infinity, ArrayType);
}


aabb2.create = function(min, max, ArrayType) {
    var out = new AABB2(ArrayType);

    min && vec2.copy(out.min, min);
    max && vec2.copy(out.max, max);

    return out;
};

aabb2.copy = function(out, a) {

    vec2.copy(out.min, a.min);
    vec2.copy(out.max, a.max);

    return out;
};

aabb2.clone = function(a) {
    return aabb2.create(a.min, a.max);
};

aabb2.set = function(out, min, max) {

    min && vec2.copy(out.min, min);
    max && vec2.copy(out.max, max);

    return out;
};

aabb2.expandPoint = function(out, point) {

    vec2.min(out.min, point);
    vec2.max(out.max, point);

    return out;
};

aabb2.expandVector = function(out, vector) {

    vec2.sub(out.min, vector);
    vec2.add(out.max, vector);

    return out;
};

aabb2.expandScalar = function(out, scalar) {

    vec2.ssub(out.min, scalar);
    vec2.sadd(out.max, scalar);

    return out;
};

aabb2.union = function(out, a) {

    vec2.min(out.min, a.min);
    vec2.max(out.max, a.max);

    return out;
};

aabb2.clear = function(out) {

    vec2.set(out.min, Infinity, Infinity);
    vec2.set(out.max, -Infinity, -Infinity);

    return out;
};

aabb2.contains = function(out, point) {
    var min = out.min,
        max = out.max,
        px = point[0],
        py = point[1];

    return !(
        px < min[0] || px > max[0] ||
        py < min[1] || py > max[1]
    );
};

aabb2.intersects = function(a, b) {
    var aMin = a.min,
        aMax = a.max,
        bMin = b.min,
        bMax = b.max;

    return !(
        bMax[0] < aMin[0] || bMin[0] > aMax[0] ||
        bMax[1] < aMin[1] || bMin[1] > aMax[1]
    );
};

aabb2.fromPoints = function(out, points) {
    var i = points.length,
        minx = Infinity,
        miny = Infinity,
        maxx = -Infinity,
        maxy = -Infinity,
        min = out.min,
        max = out.max,
        x, y, v;

    while (i--) {
        v = points[i];
        x = v[0];
        y = v[1];

        minx = minx > x ? x : minx;
        miny = miny > y ? y : miny;

        maxx = maxx < x ? x : maxx;
        maxy = maxy < y ? y : maxy;
    }

    min[0] = minx;
    min[1] = miny;
    max[0] = maxx;
    max[1] = maxy;

    return out;
};

aabb2.fromPointArray = function(out, points) {
    var i = 0,
        il = points.length,
        minx = Infinity,
        miny = Infinity,
        maxx = -Infinity,
        maxy = -Infinity,
        min = out.min,
        max = out.max,
        x, y;

    while (i < il) {
        x = points[i];
        y = points[i + 1];
        i += 2;

        minx = minx > x ? x : minx;
        miny = miny > y ? y : miny;

        maxx = maxx < x ? x : maxx;
        maxy = maxy < y ? y : maxy;
    }

    min[0] = minx;
    min[1] = miny;
    max[0] = maxx;
    max[1] = maxy;

    return out;
};

aabb2.fromCenterSize = function(out, center, size) {
    var min = out.min,
        max = out.max,
        x = center[0],
        y = center[1],
        hx = size[0] * 0.5,
        hy = size[1] * 0.5;

    min[0] = x - hx;
    min[1] = y - hy;

    max[0] = x + hx;
    max[1] = y + hy;

    return out;
};

aabb2.equal = function(a, b) {
    return (
        vec2.equal(a.min, b.min) ||
        vec2.equal(a.max, b.max)
    );
};

aabb2.notEqual = function(a, b) {
    return (
        vec2.notEqual(a.min, b.min) ||
        vec2.notEqual(a.max, b.max)
    );
};

aabb2.str = function(out) {

    return "AABB2(" + vec2.str(out.min) + ", " + vec2.str(out.max) + ")";
};


},
function(require, exports, module, global) {

var keys = require(3);


var mathf = module.exports;


mathf.ArrayType = typeof(Float32Array) !== "undefined" ? Float32Array : Array;

mathf.PI = Math.PI;
mathf.TAU = mathf.PI * 2;
mathf.TWO_PI = mathf.TAU;
mathf.HALF_PI = mathf.PI * 0.5;
mathf.FOURTH_PI = mathf.PI * 0.25;

mathf.EPSILON = 0.000001;

mathf.TO_RADS = mathf.PI / 180;
mathf.TO_DEGS = 180 / mathf.PI;

mathf.E = Math.E;
mathf.LN2 = Math.LN2;
mathf.LN10 = Math.LN10;
mathf.LOG2E = Math.LOG2E;
mathf.LOG10E = Math.LOG10E;
mathf.SQRT1_2 = Math.SQRT1_2;
mathf.SQRT2 = Math.SQRT2;

mathf.abs = Math.abs;

mathf.acos = Math.acos;
mathf.acosh = Math.acosh || (Math.acosh = function acosh(x) {
    return Math.log(x + Math.sqrt(x * x - 1));
});
mathf.asin = Math.asin;
mathf.asinh = Math.asinh || (Math.asinh = function asinh(x) {
    if (x === -Infinity) {
        return x;
    } else {
        return Math.log(x + Math.sqrt(x * x + 1));
    }
});
mathf.atan = Math.atan;
mathf.atan2 = Math.atan2;
mathf.atanh = Math.atanh || (Math.atanh = function atanh(x) {
    return Math.log((1 + x) / (1 - x)) / 2;
});

mathf.cbrt = Math.cbrt || (Math.cbrt = function cbrt(x) {
    var y = mathf.pow(mathf.abs(x), 1 / 3);
    return x < 0 ? -y : y;
});
mathf.ceil = Math.ceil;
mathf.cos = Math.cos;
mathf.cosh = Math.cosh || (Math.cosh = function cosh(x) {
    return (Math.exp(x) + Math.exp(-x)) / 2;
});

mathf.exp = Math.exp;

mathf.floor = Math.floor;
mathf.fround = Math.fround || (Math.fround = function fround(x) {
    return x;
});

mathf.log = Math.log;
mathf.log10 = Math.log10 || (Math.log10 = function log10(x) {
    return Math.log(x) / Math.LN10;
});

mathf.max = Math.max;
mathf.min = Math.min;

mathf.pow = Math.pow;

mathf.random = Math.random;
mathf.round = Math.round;

mathf.sin = Math.sin;
mathf.sinh = Math.sinh || (Math.sinh = function sinh(x) {
    return (Math.exp(x) - Math.exp(-x)) / 2;
});
mathf.sqrt = Math.sqrt;

mathf.tan = Math.tan;
mathf.tanh = Math.tanh || (Math.tanh = function tanh(x) {
    if (x === Infinity) {
        return 1;
    } else if (x === -Infinity) {
        return -1;
    } else {
        return (Math.exp(x) - Math.exp(-x)) / (Math.exp(x) + Math.exp(-x));
    }
});

mathf.equals = function(a, b, e) {

    return mathf.abs(a - b) < (e !== undefined ? e : mathf.EPSILON);
};

mathf.modulo = function(a, b) {
    var r = a % b;

    return (r * b < 0) ? r + b : r;
};

mathf.standardRadian = function(x) {

    return mathf.modulo(x, mathf.TWO_PI);
};

mathf.standardAngle = function(x) {

    return mathf.modulo(x, 360);
};

mathf.sign = function(x) {

    return x < 0 ? -1 : 1;
};

mathf.snap = function(x, y) {
    var m = x % y;

    return m < y ? x - m : x + y - m;
};

mathf.clamp = function(x, min, max) {

    return x < min ? min : x > max ? max : x;
};

mathf.clampBottom = function(x, min) {

    return x < min ? min : x;
};

mathf.clampTop = function(x, max) {

    return x > max ? max : x;
};

mathf.clamp01 = function(x) {

    return x < 0 ? 0 : x > 1 ? 1 : x;
};

mathf.truncate = function(x, n) {
    var p = mathf.pow(10, n),
        num = x * p;

    return (num < 0 ? mathf.ceil(num) : mathf.floor(num)) / p;
};

mathf.lerp = function(a, b, x) {

    return a + (b - a) * x;
};

mathf.lerpRadian = function(a, b, x) {

    return mathf.standardRadian(a + (b - a) * x);
};

mathf.lerpAngle = function(a, b, x) {

    return mathf.standardAngle(a + (b - a) * x);
};

mathf.lerpCos = function(a, b, x) {
    var ft = x * mathf.PI,
        f = (1 - mathf.cos(ft)) * 0.5;

    return a * (1 - f) + b * f;
};

mathf.lerpCubic = function(v0, v1, v2, v3, x) {
    var P, Q, R, S, Px, Qx, Rx;

    v0 || (v0 = v1);
    v3 || (v3 = v2);

    P = (v3 - v2) - (v0 - v1);
    Q = (v0 - v1) - P;
    R = v2 - v0;
    S = v1;

    Px = P * x;
    Qx = Q * x;
    Rx = R * x;

    return (Px * Px * Px) + (Qx * Qx) + Rx + S;
};

mathf.smoothStep = function(x, min, max) {
    if (x <= min) return 0;
    if (x >= max) return 1;

    x = (x - min) / (max - min);

    return x * x * (3 - 2 * x);
};

mathf.smootherStep = function(x, min, max) {
    if (x <= min) return 0;
    if (x >= max) return 1;

    x = (x - min) / (max - min);

    return x * x * x * (x * (x * 6 - 15) + 10);
};

mathf.pingPong = function(x, length) {
    length || (length = 1);

    return length - mathf.abs(x % (2 * length) - length);
};

mathf.degsToRads = function(x) {

    return mathf.standardRadian(x * mathf.TO_RADS);
};

mathf.radsToDegs = function(x) {

    return mathf.standardAngle(x * mathf.TO_DEGS);
};

mathf.randInt = function(min, max) {

    return mathf.round(min + (mathf.random() * (max - min)));
};

mathf.randFloat = function(min, max) {

    return min + (mathf.random() * (max - min));
};

mathf.randSign = function() {

    return mathf.random() < 0.5 ? 1 : -1;
};

mathf.shuffle = function(array) {
    var i = array.length,
        j, x;

    while (i) {
        j = (mathf.random() * i--) | 0;
        x = array[i];
        array[i] = array[j];
        array[j] = x;
    }
    return array;
};

mathf.randArg = function() {

    return arguments[(mathf.random() * arguments.length) | 0];
};

mathf.randChoice = function(array) {

    return array[(mathf.random() * array.length) | 0];
};

mathf.randChoiceObject = function(object) {
    var objectKeys = keys(object);

    return object[objectKeys[(mathf.random() * objectKeys.length) | 0]];
};

mathf.isPowerOfTwo = function(x) {

    return (x & -x) === x;
};

mathf.floorPowerOfTwo = function(x) {
    var i = 2,
        prev;

    while (i < x) {
        prev = i;
        i *= 2;
    }

    return prev;
};

mathf.ceilPowerOfTwo = function(x) {
    var i = 2;

    while (i < x) {
        i *= 2;
    }

    return i;
};

var n225 = 0.39269908169872414,
    n675 = 1.1780972450961724,
    n1125 = 1.9634954084936207,
    n1575 = 2.748893571891069,
    n2025 = 3.5342917352885173,
    n2475 = 4.319689898685966,
    n2925 = 5.105088062083414,
    n3375 = 5.8904862254808625,

    RIGHT = "right",
    UP_RIGHT = "up_right",
    UP = "up",
    UP_LEFT = "up_left",
    LEFT = "left",
    DOWN_LEFT = "down_left",
    DOWN = "down",
    DOWN_RIGHT = "down_right";

mathf.directionAngle = function(a) {
    a = mathf.standardRadian(a);

    return (
        (a >= n225 && a < n675) ? UP_RIGHT :
        (a >= n675 && a < n1125) ? UP :
        (a >= n1125 && a < n1575) ? UP_LEFT :
        (a >= n1575 && a < n2025) ? LEFT :
        (a >= n2025 && a < n2475) ? DOWN_LEFT :
        (a >= n2475 && a < n2925) ? DOWN :
        (a >= n2925 && a < n3375) ? DOWN_RIGHT :
        RIGHT
    );
};

mathf.direction = function(x, y) {
    var a = mathf.standardRadian(mathf.atan2(y, x));

    return (
        (a >= n225 && a < n675) ? UP_RIGHT :
        (a >= n675 && a < n1125) ? UP :
        (a >= n1125 && a < n1575) ? UP_LEFT :
        (a >= n1575 && a < n2025) ? LEFT :
        (a >= n2025 && a < n2475) ? DOWN_LEFT :
        (a >= n2475 && a < n2925) ? DOWN :
        (a >= n2925 && a < n3375) ? DOWN_RIGHT :
        RIGHT
    );
};


},
function(require, exports, module, global) {

var has = require(4),
    isNative = require(5),
    isObject = require(7);


var nativeKeys = Object.keys;


if (!isNative(nativeKeys)) {
    nativeKeys = function keys(obj) {
        var localHas = has,
            out = [],
            i = 0,
            key;

        for (key in obj) {
            if (localHas(obj, key)) {
                out[i++] = key;
            }
        }

        return out;
    };
}

module.exports = function keys(obj) {
    return nativeKeys(isObject(obj) ? obj : Object(obj));
};


},
function(require, exports, module, global) {

var hasOwnProp = Object.prototype.hasOwnProperty;


module.exports = function has(obj, key) {
    return hasOwnProp.call(obj, key);
};


},
function(require, exports, module, global) {

var isFunction = require(6);


var reHostCtor = /^\[object .+?Constructor\]$/,

    functionToString = Function.prototype.toString,

    reNative = RegExp("^" +
        functionToString.call(toString)
        .replace(/[.*+?^${}()|[\]\/\\]/g, "\\$&")
        .replace(/toString|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    ),

    isHostObject = (function() {
        try {
            String({
                "toString": 0
            } + "");
        } catch (e) {
            return function isHostObject() {
                return false;
            };
        }

        return function isHostObject(value) {
            return !isFunction(value.toString) && typeof(value + "") === "string";
        };
    }());


module.exports = function isNative(obj) {
    return obj && (
        isFunction(obj) ?
        reNative.test(functionToString.call(obj)) : (
            typeof(obj) === "object" && (
                (isHostObject(obj) ? reNative : reHostCtor).test(obj) || false
            )
        )
    ) || false;
};


},
function(require, exports, module, global) {

var objectFunction = "[object Function]",
    toString = Object.prototype.toString,
    isFunction;


if (typeof(/./) === "function" || (typeof(Uint8Array) !== "undefined" && typeof(Uint8Array) !== "function")) {
    isFunction = function isFunction(obj) {
        return toString.call(obj) === objectFunction;
    };
} else {
    isFunction = function isFunction(obj) {
        return typeof(obj) === "function" || false;
    };
}


module.exports = isFunction;


},
function(require, exports, module, global) {

module.exports = function isObject(obj) {
    var type = typeof(obj);
    return type === "function" || (obj && type === "object") || false;
};


},
function(require, exports, module, global) {

var mathf = require(2);


var vec2 = module.exports;


vec2.create = function(x, y) {
    var out = new mathf.ArrayType(2);

    out[0] = x !== undefined ? x : 0;
    out[1] = y !== undefined ? y : 0;

    return out;
};

vec2.copy = function(out, a) {

    out[0] = a[0];
    out[1] = a[1];

    return out;
};

vec2.clone = function(a) {
    var out = new mathf.ArrayType(2);

    out[0] = a[0];
    out[1] = a[1];

    return out;
};

vec2.set = function(out, x, y) {

    out[0] = x !== undefined ? x : 0;
    out[1] = y !== undefined ? y : 0;

    return out;
};

vec2.add = function(out, a, b) {

    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];

    return a;
};

vec2.sub = function(out, a, b) {

    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];

    return out;
};

vec2.mul = function(out, a, b) {

    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];

    return out;
};

vec2.div = function(out, a, b) {
    var bx = b[0],
        by = b[1];

    out[0] = a[0] * (bx !== 0 ? 1 / bx : bx);
    out[1] = a[1] * (by !== 0 ? 1 / by : by);

    return out;
};

vec2.sadd = function(out, a, s) {

    out[0] = a[0] + s;
    out[1] = a[1] + s;

    return a;
};

vec2.ssub = function(out, a, s) {

    out[0] = a[0] - s;
    out[1] = a[1] - s;

    return out;
};

vec2.smul = function(out, a, s) {

    out[0] = a[0] * s;
    out[1] = a[1] * s;

    return out;
};

vec2.sdiv = function(out, a, s) {
    s = s !== 0 ? 1 / s : s;

    out[0] = a[0] * s;
    out[1] = a[1] * s;

    return out;
};

vec2.lengthSqValues = function(x, y) {

    return x * x + y * y;
};

vec2.lengthValues = function(x, y) {
    var lsq = vec2.lengthSqValues(x, y);

    return lsq !== 0 ? mathf.sqrt(lsq) : lsq;
};

vec2.invLengthValues = function(x, y) {
    var lsq = vec2.lengthSqValues(x, y);

    return lsq !== 0 ? 1 / mathf.sqrt(lsq) : lsq;
};

vec2.cross = function(a, b) {

    return a[0] * b[1] - a[1] * b[0];
};

vec2.dot = function(a, b) {

    return a[0] * b[0] + a[1] * b[1];
};

vec2.lengthSq = function(a) {

    return vec2.dot(a, a);
};

vec2.length = function(a) {
    var lsq = vec2.lengthSq(a);

    return lsq !== 0 ? mathf.sqrt(lsq) : lsq;
};

vec2.invLength = function(a) {
    var lsq = vec2.lengthSq(a);

    return lsq !== 0 ? 1 / mathf.sqrt(lsq) : lsq;
};

vec2.setLength = function(out, a, length) {
    var x = a[0],
        y = a[1],
        s = length * vec2.invLengthValues(x, y);

    out[0] = x * s;
    out[1] = y * s;

    return out;
};

vec2.normalize = function(out, a) {
    var x = a[0],
        y = a[1],
        invlsq = vec2.invLengthValues(x, y);

    out[0] = x * invlsq;
    out[1] = y * invlsq;

    return out;
};

vec2.inverse = function(out, a) {

    out[0] = a[0] * -1;
    out[1] = a[1] * -1;

    return out;
};

vec2.lerp = function(out, a, b, x) {
    var lerp = mathf.lerp;

    out[0] = lerp(a[0], b[0], x);
    out[1] = lerp(a[1], b[1], x);

    return out;
};

vec2.perp = function(out, a) {

    out[0] = -a[1];
    out[1] = a[0];

    return out;
};

vec2.perpL = function(out, a) {

    out[0] = a[1];
    out[1] = -a[0];

    return out;
};

vec2.min = function(out, a, b) {
    var ax = a[0],
        ay = a[1],
        bx = b[0],
        by = b[1];

    out[0] = bx < ax ? bx : ax;
    out[1] = by < ay ? by : ay;

    return out;
};

vec2.max = function(out, a, b) {
    var ax = a[0],
        ay = a[1],
        bx = b[0],
        by = b[1];

    out[0] = bx > ax ? bx : ax;
    out[1] = by > ay ? by : ay;

    return out;
};

vec2.clamp = function(out, a, min, max) {
    var x = a[0],
        y = a[1],
        minx = min[0],
        miny = min[1],
        maxx = max[0],
        maxy = max[1];

    out[0] = x < minx ? minx : x > maxx ? maxx : x;
    out[1] = y < miny ? miny : y > maxy ? maxy : y;

    return out;
};

vec2.transformAngle = function(out, a, angle) {
    var x = a[0],
        y = a[1],
        c = mathf.cos(angle),
        s = mathf.sin(angle);

    out[0] = x * c - y * s;
    out[1] = x * s + y * c;

    return out;
};

vec2.transformMat2 = function(out, a, m) {
    var x = a[0],
        y = a[1];

    out[0] = x * m[0] + y * m[2];
    out[1] = x * m[1] + y * m[3];

    return out;
};

vec2.transformMat32 = function(out, a, m) {
    var x = a[0],
        y = a[1];

    out[0] = x * m[0] + y * m[2] + m[4];
    out[1] = x * m[1] + y * m[3] + m[5];

    return out;
};

vec2.transformMat3 = function(out, a, m) {
    var x = a[0],
        y = a[1];

    out[0] = x * m[0] + y * m[3] + m[6];
    out[1] = x * m[1] + y * m[4] + m[7];

    return out;
};

vec2.transformMat4 = function(out, a, m) {
    var x = a[0],
        y = a[1];

    out[0] = x * m[0] + y * m[4] + m[12];
    out[1] = x * m[1] + y * m[5] + m[13];

    return out;
};

vec2.transformProjection = function(out, a, m) {
    var x = a[0],
        y = a[1],
        d = x * m[3] + y * m[7] + m[11] + m[15];

    d = d !== 0 ? 1 / d : d;

    out[0] = (x * m[0] + y * m[4] + m[12]) * d;
    out[1] = (x * m[1] + y * m[5] + m[13]) * d;

    return out;
};

vec2.positionFromMat32 = function(out, m) {

    out[0] = m[4];
    out[1] = m[5];

    return out;
};

vec2.positionFromMat4 = function(out, m) {

    out[0] = m[12];
    out[1] = m[13];

    return out;
};

vec2.scaleFromMat2 = function(out, m) {

    out[0] = vec2.lengthValues(m[0], m[2]);
    out[1] = vec2.lengthValues(m[1], m[3]);

    return out;
};

vec2.scaleFromMat32 = vec2.scaleFromMat2;

vec2.scaleFromMat3 = function(out, m) {

    out[0] = vec2.lengthValues(m[0], m[3]);
    out[1] = vec2.lengthValues(m[1], m[4]);

    return out;
};

vec2.scaleFromMat4 = function(out, m) {

    out[0] = vec2.lengthValues(m[0], m[4]);
    out[1] = vec2.lengthValues(m[1], m[5]);

    return out;
};

vec2.equal = function(a, b) {
    return !(
        a[0] !== b[0] ||
        a[1] !== b[1]
    );
};

vec2.notEqual = function(a, b) {
    return (
        a[0] !== b[0] ||
        a[1] !== b[1]
    );
};

vec2.str = function(out) {

    return "Vec2(" + out[0] + ", " + out[1] + ")";
};


}], (new Function("return this;"))()));
